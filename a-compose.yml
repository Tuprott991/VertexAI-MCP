version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: insurance_mcp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # MCP Server
  mcp-server:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=insurance_mcp
      - DB_USER=postgres
      - DB_PASSWORD=your_password
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network
    volumes:
      - ./mcp_server/documents:/app/documents:ro

  # MCP Client
  mcp-client:
    build:
      context: ./mcp_client
      dockerfile: Dockerfile
    environment:
      - MCP_SERVER_URL=http://mcp-server:8081
      - CLIENT_HOST=0.0.0.0
      - CLIENT_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=insurance_mcp
      - DB_USER=postgres
      - DB_PASSWORD=your_password
    ports:
      - "8080:8080"
    depends_on:
      mcp-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

volumes:
  postgres_data:

networks:
  mcp-network:
    driver: bridge